Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ /dev/null	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\nfrom twilio.rest import Client\r\nfrom rest_framework import generics\r\nfrom rest_framework import serializers\r\nfrom django.shortcuts import render, redirect\r\nfrom .models import User, Countries, Centers, Url_Params, EmailCodes, Interviews, News, Saved, Groups, Clinics, Disease\r\nfrom .serializers import NewsSerializer, UserSerializer, AdminSerializer, SearchSerializer, CenterSerializer, \\\r\n    VerifyCodeSerializer, ResendCodeSerializer, DiseaseSerializer\r\nfrom django.contrib import messages\r\nfrom django.http import Http404, HttpResponse\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom .models import User, Like\r\nfrom django.contrib.auth import login, logout\r\nfrom .service import Send_email, generate_email_code, create_or_delete\r\nfrom django.utils.crypto import get_random_string\r\nfrom django.contrib.auth.hashers import check_password\r\nfrom .permissions import IsAdminOrReadOnly\r\nfrom django.shortcuts import get_object_or_404\r\nimport json\r\nimport requests\r\nfrom django.db.models import Q\r\nimport random\r\n# REST IMPORTS\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.permissions import IsAuthenticatedOrReadOnly, IsAuthenticated, IsAdminUser, AllowAny\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom rest_framework.decorators import permission_classes, action, api_view\r\n\r\n\r\ndef index(request):\r\n    return render(request, template_name='api/index.html')\r\n\r\ndef generate_verification_code():\r\n\r\n    code = random.randint(1000, 9999)\r\n    return str(code)\r\n\r\ndef registration(request, parameter):\r\n    if Url_Params.objects.filter(parameter=parameter).exists():\r\n        group_id = Url_Params.objects.get(parameter=parameter).group_id\r\n        group_name = Groups.objects.get(id=group_id).name\r\n        if group_name == 'Администраторы':\r\n            return HttpResponse('Здесь будет форма регистрации админа')\r\n        elif group_name == 'Администраторы Центров':\r\n            return HttpResponse('Здесь будет форма регистрации центра и его админа')\r\n        elif group_name == 'Администраторы Клиник':\r\n            return HttpResponse('Здесь будет форма регистрации клиники и его админа')\r\n        elif group_name == 'Врачи':\r\n            return HttpResponse('Здесь будет форма регистрации врача')\r\n    raise Http404\r\n\r\n\r\n### NEWS BLOCK ###\r\nclass SaveView(APIView):  # Append and delete saved news\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def post(self, request, id):\r\n        try:\r\n            news = News.objects.get(id=id)\r\n            return create_or_delete(Saved, user=request.user, news=news)\r\n        except:\r\n            return Response({'error': 'Запись не найдена!'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n\r\nclass LikeView(APIView):  # Append and delete like\r\n    permission_classes = [IsAuthenticated]\r\n\r\n    def post(self, request, id):\r\n        try:\r\n            news = News.objects.get(id=id)\r\n            return create_or_delete(Like, user=request.user, news=news)\r\n        except:\r\n            return Response({'error': 'Запись не найдена!'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n\r\n\r\n\r\nclass NewsDetailView(APIView):  # Single news view\r\n    permission_classes = [IsAdminOrReadOnly]\r\n    error_response = {'error': 'Новость не найдена!'}\r\n\r\n    def get(self, request, id):  # get single news\r\n        news = get_object_or_404(News, id=id)\r\n        serializer = NewsSerializer(news)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n    def delete(self, request, id):  # delete single news\r\n        news = get_object_or_404(News, id=id)\r\n        news.delete()\r\n        return Response({'result': 'Новость удалена!'}, status=status.HTTP_204_NO_CONTENT)\r\n\r\n    def put(self, request, id):  # update single news\r\n        news = get_object_or_404(News, id=id)\r\n        serializer = NewsSerializer(news, data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_202_ACCEPTED)\r\n        return Response(serializer.errors, status=status.HTTP_422_UNPROCESSABLE_ENTITY)\r\n\r\n    def handle_exception(self, exc):\r\n        if isinstance(exc, Http404):\r\n            return Response(self.error_response, status=status.HTTP_404_NOT_FOUND)\r\n        return super().handle_exception(exc)\r\n\r\n\r\nclass NewsView(generics.ListCreateAPIView):\r\n    permission_classes = [IsAdminOrReadOnly]\r\n    serializer_class = NewsSerializer\r\n\r\n    def get_queryset(self):\r\n        user = self.request.user\r\n        if user.is_staff:\r\n            return News.objects.all()\r\n        elif user.disease is not None:\r\n            return News.objects.filter(disease=user.disease)\r\n        elif user.center is not None:\r\n            return News.objects.filter(center=user.center)\r\n        else:\r\n            raise serializers.ValidationError('Для доступа к новостям, вам следует указать центр или заболевание')\r\n\r\n    def get(self, request, *args, **kwargs):\r\n        queryset = self.get_queryset()\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n    def post(self, request, *args, **kwargs):\r\n        return self.create(request, *args, **kwargs)\r\n\r\n\r\n\r\n### SEARCH ###\r\n\r\n\r\n\r\nclass SearchView(APIView):\r\n    def get(self, request, *args, **kwargs):\r\n        clinics = Clinics.objects.all()\r\n        centers = Centers.objects.all()\r\n        users = User.objects.filter(is_staff=True)\r\n\r\n        search_results = {\r\n            'clinics': clinics,\r\n            'centers': centers,\r\n            'users': users,\r\n        }\r\n\r\n        serializer = SearchSerializer(search_results)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n    \r\n\r\n\r\n### USER BLOCK ###\r\n\r\n\r\ndef send_sms(number, code):\r\n    # account_sid = ''\r\n    # auth_token = ''\r\n    # client = Client(account_sid, auth_token)\r\n    # message = client.messages \\\r\n    #     .create(\r\n    #     body=f'test тестовое сообщение - {code}',\r\n    #     from_='+18335872557',\r\n    #     to=str(number)\r\n    # )\r\n\r\n    print(f'на {number} был отправлен код {code}')\r\n\r\n\r\n\r\nclass CreateUserView(generics.ListCreateAPIView):\r\n    permission_classes = [AllowAny]\r\n    model = User\r\n    serializer_class = UserSerializer\r\n    def post(self, request):\r\n        code = generate_verification_code()\r\n        serializer = UserSerializer(data=request.data, context={'request': request})\r\n        if serializer.is_valid():\r\n            user = serializer.save()\r\n            # print(code, '-code')\r\n            if int(request.data['stage']) == 3:\r\n                send_sms(user.number, code)\r\n                user.verification_code = code\r\n                user.save()\r\n\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    \r\n    \r\nclass CenterRegistrationView(APIView):\r\n    permission_classes = [AllowAny]\r\n    def get(self, request):\r\n        centers = Centers.objects.all().filter(city=request.data[\"city\"])\r\n        return Response(CenterSerializer(centers, many=True).data, status=status.HTTP_200_OK)\r\n    \r\nclass GetDiseasesView(APIView):\r\n    def get(self, request):\r\n        diseases = Disease.objects.all()\r\n        serializer = DiseaseSerializer(diseases, many=True)\r\n        return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\nclass ResendSmsView(APIView):\r\n    def post(self, request):\r\n        serializer = ResendCodeSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            number = serializer.validated_data['number']\r\n\r\n            try:\r\n                user = User.objects.get(number=number)\r\n            except User.DoesNotExist:\r\n                return Response({'detail': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n\r\n            code = generate_verification_code()\r\n            # print(code, 'code from res')\r\n            send_sms(user.number, code)\r\n            user.verification_code = code\r\n            user.save()\r\n    \r\n            return Response({'detail': 'SMS resend successfully'}, status=status.HTTP_200_OK)\r\n\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\nclass VerifyCodeView(APIView):\r\n    def post(self, request):\r\n        serializer = VerifyCodeSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            number = serializer.validated_data.get('number')\r\n            verification_code = serializer.validated_data.get('verification_code')\r\n            # print(verification_code, ' current code from serializer')\r\n\r\n            try:\r\n                user = User.objects.get(number=number)\r\n                print(user.id, 'id текущего пользователя')\r\n                print(user.verification_code, 'verif_code from current user')\r\n            except User.DoesNotExist:\r\n                return Response({\"error\": \"User does not exist\"}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n            if verification_code == user.verification_code:\r\n                # print(verification_code, 'текущий verif_code')\r\n                user.is_required = True\r\n                user.save()\r\n                return Response({\"message\": \"User verified successfully\"}, status=status.HTTP_200_OK)\r\n            else:\r\n                return Response({\"error\": \"Invalid verification code\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n\r\nclass UpdateUserView(generics.ListCreateAPIView):\r\n    permission_classes = [AllowAny]\r\n    model = User\r\n    serializer_class = UserSerializer\r\n\r\n    def post(self, request):\r\n        serializer = UserSerializer()\r\n        # serializer.update(instance=request.user, validated_data=request.data)\r\n        serializer.update(validated_data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass CreateAdminView(generics.ListCreateAPIView):\r\n    permission_classes = [AllowAny]\r\n    model = User\r\n    serializer_class = AdminSerializer\r\n\r\n    def post(self, request):\r\n        serializer = AdminSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_200_OK)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef LOGOUT(request):\r\n    logout(request)\r\n    return redirect('home_url')\r\n\r\n\r\n@csrf_exempt\r\n# def ADMIN_SIGN_UP(request):\r\n#     # if request.user.is_staff:\r\n#     if request.method == 'POST':\r\n#         form = AdminRegistrationForm(request.POST, request.FILES)\r\n#         if form.is_valid():\r\n#             data = form.cleaned_data\r\n#             number = data['number']\r\n#             form_is_valid = True\r\n#             number_pattern = re.compile('^[+]+[0-9]+$')\r\n#             email_pattern = re.compile('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$')\r\n#             name_pattern = re.compile('^[а-яА-Я]+$')\r\n#             password_pattern = re.compile('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]+$')\r\n#\r\n#             if form_is_valid:\r\n#                 User.objects.create_superuser(first_name=data['first_name'], last_name=data['last_name'],\r\n#                                               email=data['email'], number=number, password=data['password1'])\r\n#                 messages.success(request, \"Вы успешно создали учетную запись админа\")\r\n#                 return redirect('home_url')\r\n#         else:\r\n#             messages.error(request, 'Неизвестная ошибка на сервере')\r\n#     else:\r\n#         form = AdminRegistrationForm\r\n#     return render(request, template_name='api/CreateAdminForm.html',\r\n#                   context={'form': form, 'title': 'Sign up admin account'})\r\n\r\n\r\n# raise Http404\r\n#\r\n# @csrf_exempt\r\n# def USER_SIGN_UP(request):\r\n#     if not request.user.is_active:\r\n#         if request.method == 'POST':\r\n#             form = UserRegistrationForm(request.POST, request.FILES)\r\n#             if form.is_valid():\r\n#                 data = form.cleaned_data\r\n#                 country_number_code = data['number_code'].strip().rsplit(\"/\", 1)\r\n#                 number_code = country_number_code[0]\r\n#                 number_length = country_number_code[1]\r\n#                 number = number_code + data['number']\r\n#                 form_is_valid = True\r\n#                 number_pattern = re.compile('^\\d{' + number_length + '}$')\r\n#                 email_pattern = re.compile('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$')\r\n#                 password_pattern = re.compile('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]+$')\r\n#                 # Проверка Номера\r\n#                 if not number_pattern.match(data['number']):\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Введен неоректный номер телефона')\r\n#                 if User.objects.filter(number=number).exists() or Interviews.objects.filter(\r\n#                         number=number).exists():\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Номер уже используется')\r\n#                 # Проверка Почты\r\n#                 if not email_pattern.match(data['email']):\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Введена некоректная почта')\r\n#                 if User.objects.filter(email=data['email']).exists() or Interviews.objects.filter(\r\n#                         email=data['email']).exists():\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Почта уже используется')\r\n#                 # Проверка паролей\r\n#                 if not password_pattern.match(data['password1']):\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Пароль должен состоять из цифр и букв обоих регистров')\r\n#                 if len(data['password1']) < 8:\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Пароль не может быть кароче 8 символов')\r\n#                 if data['password1'] != data['password2']:\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Пароли должны совподвать')\r\n#                 # Проверка Соглашения\r\n#                 if not data['agree_terms']:\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Вы обязательно должны принять условия соглашения')\r\n#                 if form_is_valid:\r\n#                     user = User.objects.create_user(number=number, email=data['email'], password=data['password1'])\r\n#                     parameter = get_random_string(length=50)\r\n#                     par_obj = Url_Params(parameter=parameter, user_id=user.id)\r\n#                     par_obj.save()\r\n#\r\n#                     message = f\"Здравствуйте! Для того чтобы продолжить регистрацию вам необходимо заполнить поля перейдя по этой ссылкe http://127.0.0.1:8000/userparameters/{parameter} и ссылка на нашу почту для контакта с нами\"\r\n#                     Send_email(user_email=data['email'], message=message)\r\n#                     # send_sms(number, message)\r\n#\r\n#                     messages.success(request,\r\n#                                      \"Вам пришло письмо на номер телефона.Перейдите по ссылке в нем для продолжения регистрации\")\r\n#                     return redirect('home_url')\r\n#             else:\r\n#                 messages.error(request, 'Ошибка при заполнении формы')\r\n#         else:\r\n#             form = UserRegistrationForm\r\n#         return render(request, template_name='api/CreateUserForm.html',\r\n#                       context={'form': form, 'title': 'Регистрация'})\r\n#     raise Http404\r\n#\r\n#\r\n# @csrf_exempt\r\n# def USER_SIGN_UP_2(request, parameter):\r\n#     if not request.user.is_active and Url_Params.objects.filter(\r\n#             parameter=parameter).exists():\r\n#         user_id = Url_Params.objects.get(parameter=parameter).user_id\r\n#         user = User.objects.get(id=user_id)\r\n#         if not Email_Codes.objects.filter(user_id=user_id).exists():\r\n#             email_code = generate_email_code()\r\n#             code_obj = Email_Codes(code=email_code, user_id=user_id)\r\n#             code_obj.save()\r\n#             Send_email(user_email=user.email,\r\n#                        message=f'Ваш код для подтверждения:{email_code}')\r\n#         if request.method == 'POST':\r\n#             form = ''\r\n#             if form.is_valid():\r\n#                 user_code = Email_Codes.objects.get(user_id=user_id)\r\n#                 data = form.cleaned_data\r\n#                 form_is_valid = True\r\n#                 if user_code.code != data['code']:\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Неверный код')\r\n#                 if form_is_valid:\r\n#                     User.objects.update_user(user=user, center=Centers.objects.get(name=data['center']),\r\n#                                              is_patient=data['is_patient'])\r\n#                     login(request, user)\r\n#                     Url_Params.objects.get(parameter=parameter).delete()\r\n#                     user_code.delete()\r\n#                     return redirect('home_url')\r\n#             else:\r\n#                 messages.error(request, 'Ошибка при заполнении формы')\r\n#         else:\r\n#             form = ''\r\n#         return render(request, template_name='api/CreateUserForm2.html',\r\n#                       context={'title': 'Регистрация',\r\n#                                'form': form, 'parameter': parameter})\r\n#     raise Http404\r\n#\r\n\r\ndef LIKE(request, news_id):\r\n    if request.user.is_active:\r\n        if request.method == 'POST':\r\n            create_or_delete(Like, news=news_id, user=request.user)\r\n            return redirect('home_url')\r\n        else:\r\n            messages.error(request, 'Ошибка!')\r\n    else:\r\n        raise Http404\r\n\r\n#\r\n# def INTERVIEW_SIGN_UP(request):\r\n#     if request.method == 'POST':\r\n#         form = InterviewRegistrationForm(request.POST, request.FILES)\r\n#         if form.is_valid():\r\n#             # Проверка уникальности почты\r\n#             data = form.cleaned_data\r\n#             number = data['number_code'] + data['number']\r\n#             country_number_code = data['number_code'].strip().rsplit(\"/\", 1)\r\n#             number_code = country_number_code[0]\r\n#             number_length = country_number_code[1]\r\n#             number = number_code + data['number']\r\n#             form_is_valid = True\r\n#             number_pattern = re.compile('^\\d{' + number_length + '}$')\r\n#             email_pattern = re.compile('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$')\r\n#             password_pattern = re.compile('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]+$')\r\n#             name_pattern = re.compile('^[а-яА-Я]+$')\r\n#             # Проверка Имени\r\n#             if not name_pattern.match(data['first_name']):\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Имя может состоять только из букв кирилицы')\r\n#             if len(data['first_name']) < 3:\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Имя не может быть кароче 3 символов')\r\n#             if len(data['first_name']) > 20:\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Имя не может быть длинее 20 символов')\r\n#             # Проверка Фамилии\r\n#             if not name_pattern.match(data['last_name']):\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Фамилия может состоять только из букв кирилицы')\r\n#             if len(data['last_name']) < 3:\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Фамилия не может быть кароче 3 символов')\r\n#             if len(data['last_name']) > 30:\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Фамилия не может быть длинее 30 символов')\r\n#             # Проверка Номера\r\n#             if not number_pattern.match(data['number']):\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Введен неоректный номер телефона')\r\n#             if User.objects.filter(number=number).exists() or Interviews.objects.filter(\r\n#                     number=number).exists():\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Номер уже используется')\r\n#             # Проверка Почты\r\n#             if not email_pattern.match(data['email']):\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Введена некоректная почта')\r\n#             if User.objects.filter(email=data['email']).exists() or Interviews.objects.filter(\r\n#                     email=data['email']).exists():\r\n#                 form_is_valid = False\r\n#                 messages.error(request, 'Почта уже используется')\r\n#             if form_is_valid:\r\n#                 interview = Interviews(type=data['type'],\r\n#                                        first_name=data['first_name'],\r\n#                                        last_name=data['last_name'], number=number,\r\n#                                        email=data['email'])\r\n#                 interview.save()\r\n#\r\n#                 parameter = get_random_string(length=50)\r\n#                 par_obj = Url_Params(parameter=parameter, interview_id=interview.id)\r\n#                 par_obj.save()\r\n#\r\n#                 message = f\"Здравствуйте! Для того чтобы продолжить регистрацию вам необходимо назначить собеседовние заполнив поля перейдя по этой ссылкe http://127.0.0.1:8000/interviewparameters/{parameter}\"\r\n#                 Send_email(user_email=interview.email, message=message)\r\n#                 # send_sms(obj.number, message)\r\n#\r\n#                 messages.success(request,\r\n#                                  \"Вам пришло письмо на номер телефона.Перейдите по ссылке для назначения собеседования\")\r\n#                 return redirect('home_url')\r\n#         else:\r\n#             messages.error(request, 'Ошибка при заполнении формы')\r\n#     else:\r\n#         form = InterviewRegistrationForm\r\n#     return render(request, template_name='api/CreateInterviewForm1.html',\r\n#                   context={'title': 'Регистрация интервью',\r\n#                            'form': form, })\r\n#\r\n#\r\n# @csrf_exempt\r\n# def INTERVIEW_SIGN_UP_2(request, parameter):\r\n#     if Url_Params.objects.filter(\r\n#             parameter=parameter).exists():\r\n#         interview_id = Url_Params.objects.get(parameter=parameter).interview_id\r\n#         interview = Interviews.objects.get(id=interview_id)\r\n#         if not Email_Codes.objects.filter(interview_id=interview_id).exists():\r\n#             email_code = generate_email_code()\r\n#             code_obj = Email_Codes(code=email_code, interview_id=interview_id)\r\n#             code_obj.save()\r\n#             Send_email(user_email=interview.email,\r\n#                        message=f'Ваш код для подтверждения:{email_code}')\r\n#         if request.method == 'POST':\r\n#             form = InterviewRegistrationForm2(request.POST, request.FILES)\r\n#             if form.is_valid():\r\n#                 interview_code = Email_Codes.objects.get(interview_id=interview_id)\r\n#                 data = form.cleaned_data\r\n#                 form_is_valid = True\r\n#                 if interview_code.code != data['code']:\r\n#                     form_is_valid = False\r\n#                     messages.error(request, 'Неверный код')\r\n#                 if form_is_valid:\r\n#                     interview.date = data['date']\r\n#                     interview.application = data['application']\r\n#                     interview.is_required = True\r\n#                     interview.save(update_fields=['date', 'application', 'is_required', 'updated_at'])\r\n#                     messages.success(request,\r\n#                                      \"Заявка была успешно отправлена.В указанное время вам придет письмо на номер телефона с приглашением на собеседование\")\r\n#                     Url_Params.objects.get(parameter=parameter).delete()\r\n#                     interview_code.delete()\r\n#                     return redirect('home_url')\r\n#             else:\r\n#                 messages.error(request, 'Ошибка при заполнении формы')\r\n#         else:\r\n#             form = InterviewRegistrationForm2\r\n#         return render(request, template_name='api/CreateInterviewForm2.html',\r\n#                       context={'title': 'Регистрация интервью',\r\n#                                'form': form, 'parameter': parameter})\r\n#     else:\r\n#         raise Http404\r\n#\r\n#\r\n# def USER_SIGN_IN(request):\r\n#     if not request.user.is_active:\r\n#         if request.method == \"POST\":\r\n#             form = UserAuthorizationForm(request.POST, request.FILES)\r\n#             if form.is_valid():\r\n#                 email_or_number = form.cleaned_data.get('email_or_number')\r\n#                 password = form.cleaned_data.get('password')\r\n#                 users = User.objects.filter(is_required=True)\r\n#                 # Проверка по номеру\r\n#                 if users.filter(number=email_or_number).exists():\r\n#                     user = users.get(number=email_or_number).exists()\r\n#                     if user.check_password(password):\r\n#                         login(request, user)\r\n#                         return redirect('home_url')\r\n#                     else:\r\n#                         messages.error(request, 'Неверно введены данные для регистрации')\r\n#                 # Проверка по почте\r\n#                 if users.filter(\r\n#                         email=email_or_number).exists():\r\n#                     user = users.get(email=email_or_number)\r\n#                     if user.check_password(password):\r\n#                         login(request, user)\r\n#                         return redirect('home_url')\r\n#                     else:\r\n#                         messages.error(request, 'Неверно введены данные для регистрации')\r\n#                 else:\r\n#                     messages.error(request, 'Неверно введены данные для регистрации')\r\n#             else:\r\n#                 messages.error(request, \"Ошибка при заполнении формы\")\r\n#         else:\r\n#             form = UserAuthorizationForm\r\n#         return render(request, template_name='api/LoginUserForm.html',\r\n#                       context={'title': 'Авторизация', 'form': form})\r\n#     else:\r\n#         raise Http404\r\n#\r\n\r\ndef Account(request):\r\n    if request.user.is_active:\r\n        return render(request, template_name='api/AccountView.html',\r\n                      context={'title': 'Аккаунт', 'user': request.user})\r\n    else:\r\n        raise Http404\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/views.py b/api/views.py
--- a/api/views.py	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ b/api/views.py	(date 1689091158221)
@@ -153,18 +153,8 @@
 ### USER BLOCK ###
 
 
-def send_sms(number, code):
-    # account_sid = ''
-    # auth_token = ''
-    # client = Client(account_sid, auth_token)
-    # message = client.messages \
-    #     .create(
-    #     body=f'test тестовое сообщение - {code}',
-    #     from_='+18335872557',
-    #     to=str(number)
-    # )
-
-    print(f'на {number} был отправлен код {code}')
+# def send_sms(number, code):
+#     key = os.get
 
 
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n<<<<<<< HEAD\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 virtualenv at D:\\Programming\\Python\\Django\\djangovenv\" project-jdk-type=\"Python SDK\" />\r\n=======\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11 (Fsd_medic)\" project-jdk-type=\"Python SDK\" />\r\n>>>>>>> 2e108af3068f0042b861313ba4e13c7de6657cce\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ b/.idea/misc.xml	(date 1689091081940)
@@ -1,8 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-<<<<<<< HEAD
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 virtualenv at D:\Programming\Python\Django\djangovenv" project-jdk-type="Python SDK" />
-=======
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (Fsd_medic)" project-jdk-type="Python SDK" />
->>>>>>> 2e108af3068f0042b861313ba4e13c7de6657cce
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (fsd_medic) (2)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/Fsd_medic.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$\" />\r\n        <option name=\"settingsModule\" value=\"fsd_medic/settings.py\" />\r\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"migrations\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 virtualenv at D:\\Programming\\Python\\Django\\djangovenv\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Fsd_medic.iml b/.idea/Fsd_medic.iml
--- a/.idea/Fsd_medic.iml	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ b/.idea/Fsd_medic.iml	(date 1689091081892)
@@ -1,32 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="django" name="Django">
-      <configuration>
-        <option name="rootFolder" value="$MODULE_DIR$" />
-        <option name="settingsModule" value="fsd_medic/settings.py" />
-        <option name="manageScript" value="$MODULE_DIR$/manage.py" />
-        <option name="environment" value="&lt;map/&gt;" />
-        <option name="doNotUseTestRunner" value="false" />
-        <option name="trackFilePattern" value="migrations" />
-      </configuration>
-    </facet>
-  </component>
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.10 virtualenv at D:\Programming\Python\Django\djangovenv" jdkType="Python SDK" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
     <option name="format" value="PLAIN" />
     <option name="myDocStringFormat" value="Plain" />
   </component>
-  <component name="TemplatesService">
-    <option name="TEMPLATE_CONFIGURATION" value="Django" />
-    <option name="TEMPLATE_FOLDERS">
-      <list>
-        <option value="$MODULE_DIR$/templates" />
-      </list>
-    </option>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="py.test" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\r\n  <profile version=\"1.0\">\r\n    <option name=\"myName\" value=\"Project Default\" />\r\n    <inspection_tool class=\"PyPackageRequirementsInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\r\n      <option name=\"ignoredPackages\">\r\n        <value>\r\n          <list size=\"5\">\r\n            <item index=\"0\" class=\"java.lang.String\" itemvalue=\"PyJWT\" />\r\n            <item index=\"1\" class=\"java.lang.String\" itemvalue=\"djangorestframework-simplejwt\" />\r\n            <item index=\"2\" class=\"java.lang.String\" itemvalue=\"tzdata\" />\r\n            <item index=\"3\" class=\"java.lang.String\" itemvalue=\"pytz\" />\r\n            <item index=\"4\" class=\"java.lang.String\" itemvalue=\"djangorestframework\" />\r\n          </list>\r\n        </value>\r\n      </option>\r\n    </inspection_tool>\r\n  </profile>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1689090978206)
@@ -1,17 +1,42 @@
 <component name="InspectionProjectProfileManager">
   <profile version="1.0">
     <option name="myName" value="Project Default" />
+    <inspection_tool class="HtmlUnknownAttribute" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="myValues">
+        <value>
+          <list size="6">
+            <item index="0" class="java.lang.String" itemvalue="{%" />
+            <item index="1" class="java.lang.String" itemvalue="%}" />
+            <item index="2" class="java.lang.String" itemvalue="csrf_token" />
+            <item index="3" class="java.lang.String" itemvalue="name" />
+            <item index="4" class="java.lang.String" itemvalue="value" />
+            <item index="5" class="java.lang.String" itemvalue="type" />
+          </list>
+        </value>
+      </option>
+      <option name="myCustomValuesEnabled" value="true" />
+    </inspection_tool>
     <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
       <option name="ignoredPackages">
         <value>
-          <list size="5">
-            <item index="0" class="java.lang.String" itemvalue="PyJWT" />
-            <item index="1" class="java.lang.String" itemvalue="djangorestframework-simplejwt" />
-            <item index="2" class="java.lang.String" itemvalue="tzdata" />
-            <item index="3" class="java.lang.String" itemvalue="pytz" />
-            <item index="4" class="java.lang.String" itemvalue="djangorestframework" />
+          <list size="1">
+            <item index="0" class="java.lang.String" itemvalue="sorl.thumbnail" />
           </list>
         </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8Inspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="E225" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8NamingInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="N814" />
+        </list>
       </option>
     </inspection_tool>
   </profile>
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n    <mapping directory=\"$PROJECT_DIR$/ms_new\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ b/.idea/vcs.xml	(date 1689090978397)
@@ -2,6 +2,5 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/ms_new" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/Fsd_medic.iml\" filepath=\"$PROJECT_DIR$/.idea/Fsd_medic.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 180b61adc66214f64de028b97ddf8591bf70b13e)
+++ b/.idea/modules.xml	(date 1689090978366)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/Fsd_medic.iml" filepath="$PROJECT_DIR$/.idea/Fsd_medic.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/fsd_medic.iml" filepath="$PROJECT_DIR$/.idea/fsd_medic.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
