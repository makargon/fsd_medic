Index: api/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport re\r\nimport random\r\n\r\n\r\nfrom rest_framework import serializers\r\nfrom .models import News, User, NumberCodes, Centers, Clinics, Disease\r\n\r\n\r\n# class DiseaseSerializer(serializers.ModelSerializer):\r\n#     class Meta:\r\n#         model = Disease\r\n#         fields = '__all__'\r\n\r\nclass UserSerializer(serializers.Serializer):\r\n    number = serializers.CharField()\r\n    password1 = serializers.CharField(write_only=True)\r\n    password2 = serializers.CharField(write_only=True)\r\n    center_id = serializers.IntegerField(allow_null=True, required=False)\r\n    disease_id = serializers.PrimaryKeyRelatedField(\r\n        queryset=Disease.objects.all(),\r\n        allow_null=True,\r\n        required=False,\r\n        many=True\r\n    )\r\n    stage = serializers.IntegerField(read_only=True)\r\n    group = serializers.CharField()\r\n\r\n\r\n\r\n    def create(self, validated_data):\r\n        self.create_validate(validated_data)\r\n        code = self.context['request'].data.get('code')\r\n        # print(code, 'code from serializer')\r\n        stage = self.context['request'].data.get('stage')\r\n        stage = int(stage)\r\n        # print(type(stage))\r\n        user = None\r\n\r\n        if stage == 1:\r\n            user = User.objects.create_user(\r\n                number=validated_data['number'],\r\n                password=validated_data['password1'],\r\n                group=validated_data['group']\r\n            )\r\n            user.stage = stage\r\n            validated_data['stage'] = stage\r\n\r\n        if stage == 2:\r\n            center_id = validated_data.get('center_id')\r\n\r\n            user = User.objects.get(number=validated_data['number'])\r\n            try:\r\n                center = Centers.objects.get(id=center_id)\r\n                user.center_id = center.id\r\n                user.country = center.country\r\n            except Centers.DoesNotExist:\r\n                user.center_id = None\r\n\r\n            for i in validated_data['disease_id']:\r\n                user.disease.add(i)\r\n                print(validated_data['disease_id'], ' test_data')\r\n\r\n            user.stage = stage\r\n            validated_data['stage'] = stage\r\n            user.save()\r\n\r\n\r\n\r\n        if stage == 3:\r\n            try:\r\n                user = User.objects.get(number=validated_data['number'])\r\n                validated_data['stage'] = stage\r\n                user.save()\r\n            except User.DoesNotExist:\r\n                raise serializers.ValidationError('User does not exist for stage 3')\r\n\r\n        return user\r\n\r\n    def to_representation(self, instance):\r\n        representation = super().to_representation(instance)\r\n        representation['disease_id'] = instance.disease.values_list('id', flat=True)\r\n        return representation\r\n\r\n    def update(self, validated_data):\r\n        self.update_validate(validated_data)\r\n        User.objects.update_user(validated_data['instance'], number=validated_data['number'],\r\n                                 email=validated_data['email'],\r\n                                 password=validated_data['password1'],\r\n                                 first_name=validated_data['first_name'], last_name=validated_data['last_name'],\r\n                                 surname=validated_data['surname'],\r\n                                 center_id=validated_data['center_id'],\r\n                                 disease_id=validated_data['disease_id'])\r\n        return validated_data['instance']\r\n\r\n    def create_validate(self, data):\r\n        number_pattern = re.compile(r'^\\+[0-9]{10}$')\r\n        password_pattern = re.compile(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]+$')\r\n\r\n        stage = self.context['request'].data.get('stage')\r\n        # print(type(stage), 'тип stage')\r\n        if stage == '1':\r\n            # Проверка Номера\r\n            if User.objects.filter(number=data['number']).exists():\r\n                raise serializers.ValidationError('Номер уже используется')\r\n\r\n            # if not number_pattern.match(data['number']):\r\n            #     raise serializers.ValidationError('Введен некорректный номер телефона')\r\n\r\n\r\n            # Проверка паролей\r\n            password1 = data.get('password1')\r\n            password2 = data.get('password2')\r\n            if password1 != password2:\r\n                raise serializers.ValidationError({'password2': 'Пароли должны совпадать'})\r\n\r\n            if not password_pattern.match(password1):\r\n                raise serializers.ValidationError(\r\n                    {'password1': 'Пароль должен состоять из цифр и букв обоих регистров'})\r\n\r\n            if len(password1) < 8:\r\n                raise serializers.ValidationError({'password1': 'Пароль должен быть не менее 8 символов'})\r\n\r\n\r\n        if stage == '2':\r\n\r\n        # Проверка присувствия данных\r\n            if data['number'] is None:\r\n                raise serializers.ValidationError('Введите номер')\r\n            if data['password1'] is None:\r\n                raise serializers.ValidationError('Введите пароль')\r\n            elif data['password2'] is None:\r\n                raise serializers.ValidationError('Подтвердите пароль')\r\n            # if data['center_id'] is None:\r\n            #     raise serializers.ValidationError('Выберите центр')\r\n            #\r\n            # if data['disease_id'] is None:\r\n            #     raise serializers.ValidationError('Выберите заболевания')\r\n\r\n\r\n\r\n    def update_validate(self, data):\r\n        if data['email'] is not None:\r\n            if User.objects.filter(email=data['email']).exists():\r\n                raise serializers.ValidationError('Почта уже используется')\r\n\r\n\r\nclass VerifyCodeSerializer(serializers.Serializer):\r\n    number = serializers.CharField()\r\n\r\n    verification_code = serializers.IntegerField()\r\n\r\nclass ResendCodeSerializer(serializers.Serializer):\r\n    number = serializers.CharField()\r\n\r\n# RESET PASSWORD BLOCK\r\nclass PasswordResetSerializer(serializers.Serializer):\r\n    number = serializers.CharField(allow_null=True, required=False)\r\n    email = serializers.CharField(allow_null=True, required=False)\r\n\r\n\r\n    def create(self, validated_data):\r\n        number = self.context['request'].data.get('number')\r\n        email = self.context['request'].data.get('email')\r\n        user = None\r\n        if number:\r\n            try:\r\n                user = User.objects.get(number=validated_data['number'])\r\n                user.save()\r\n            except User.DoesNotExist:\r\n                raise serializers.ValidationError('User does not have a number')\r\n        if email:\r\n            try:\r\n                user = User.objects.get(email=validated_data['email'])\r\n            except User.DoesNotExist:\r\n                raise serializers.ValidationError('User does not have an email')\r\n        return user\r\n\r\nclass VerifyResetCodeSerializer(serializers.Serializer):\r\n    email = serializers.CharField(allow_null=True, required=False)\r\n    number = serializers.CharField(allow_null=True, required=False)\r\n    reset_code = serializers.IntegerField()\r\n\r\nclass NewPasswordSerializer(serializers.Serializer):\r\n    email = serializers.CharField(allow_null=True, required=False)\r\n    number = serializers.CharField(allow_null=True, required=False)\r\n    new_password = serializers.CharField(min_length=8, max_length=128)\r\n    confirm_password = serializers.CharField(min_length=8, max_length=128)\r\n\r\n    def validate(self, data):\r\n        if data['new_password'] != data['confirm_password']:\r\n            raise serializers.ValidationError(\"Passwords do not match.\")\r\n        return data\r\n\r\n#END RESET PASSWORD BLOCK\r\nclass AdminSerializer(serializers.Serializer):\r\n    def create(self, validated_data):\r\n        self.create_validate(validated_data)\r\n        return User.objects.create_superuser(number=validated_data['number'],\r\n                                             email=validated_data['email'],\r\n                                             first_name=validated_data['first_name'],\r\n                                             last_name=validated_data['last_name'],\r\n                                             password=validated_data['password1'])\r\n\r\n    def update(self, validated_data):\r\n        pass\r\n\r\n    def create_validate(self, data):\r\n        number_pattern = re.compile('^[+]+[0-9]+$')\r\n        email_pattern = re.compile('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$')\r\n        name_pattern = re.compile('^[а-яА-Я]+$')\r\n        password_pattern = re.compile('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]+$')\r\n\r\n        if data['email'] is None:\r\n            raise serializers.ValidationError('Введите почту')\r\n        if data['first_name'] is None:\r\n            raise serializers.ValidationError('Введите Имя')\r\n        if data['last_name'] is None:\r\n            raise serializers.ValidationError('Введите Фамилию')\r\n        if data['password1'] is None:\r\n            raise serializers.ValidationError('Введите пароль')\r\n        elif data['password2'] is None:\r\n            raise serializers.ValidationError('Подтвердите пароль')\r\n        # Проверка Почты\r\n        if not email_pattern.match(data['email']):\r\n            raise serializers.ValidationError('Введена некоректная почта')\r\n        # Проверка Имени\r\n        if not name_pattern.match(data['first_name']):\r\n            raise serializers.ValidationError('Имя может состоять только из букв кирилицы')\r\n        if len(data['first_name']) < 3:\r\n            raise serializers.ValidationError('Имя не может быть кароче 3 символов')\r\n        if len(data['first_name']) > 20:\r\n            raise serializers.ValidationError('Имя не может быть длинее 20 символов')\r\n        # Проверка Фамилии\r\n        # Проверка телефона\r\n        if User.objects.filter(number=data['number']).exists():\r\n            raise serializers.ValidationError('Номер уже используется')\r\n\r\n        if not name_pattern.match(data['last_name']):\r\n            raise serializers.ValidationError('Фамилия может состоять только из букв кирилицы')\r\n        if len(data['last_name']) < 3:\r\n            raise serializers.ValidationError('Фамилия не может быть кароче 3 символов')\r\n        if len(data['last_name']) > 30:\r\n            raise serializers.ValidationError('Фамилия не может быть длинее 30 символов')\r\n        # Проверка паролей\r\n        if not password_pattern.match(data['password1']):\r\n            raise serializers.ValidationError('Пароль должен состоять из цифр и букв обоих регистров')\r\n        if len(data['password1']) < 8:\r\n            raise serializers.ValidationError('Пароль не может быть кароче 8 символов')\r\n        if data['password1'] != data['password2']:\r\n            raise serializers.ValidationError('Пароли должны совподвать')\r\n\r\n    def update_validate(self, data):\r\n        pass\r\n\r\n    number = serializers.CharField()\r\n    email = serializers.CharField()\r\n    first_name = serializers.CharField()\r\n    last_name = serializers.CharField()\r\n    password1 = serializers.CharField(write_only=True)\r\n    password2 = serializers.CharField(write_only=True)\r\n\r\n\r\nclass UserGetSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = User\r\n        fields = '__all__'\r\n\r\n\r\nclass NewsSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = News\r\n        fields = '__all__'\r\n\r\n    def create(self, validated_data):\r\n        return News.objects.create(**validated_data)\r\n\r\n    def update(self, instance, validated_data):\r\n        instance.title = validated_data.get('title', instance.title)\r\n        instance.text = validated_data.get('text', instance.text)\r\n        instance.image = validated_data.get('image', instance.image)\r\n        instance.center = validated_data.get('center', instance.center)\r\n        instance.disease = validated_data.get('disease', instance.disease)\r\n        instance.save()\r\n        return instance\r\n\r\n\r\nclass ClinicSerializer(serializers.Serializer):\r\n    class Meta:\r\n        model = Clinics\r\n        fields = '__all__'\r\n\r\n\r\nclass CenterSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Centers\r\n        fields = '__all__'\r\n\r\n\r\nclass SearchSerializer(serializers.Serializer):\r\n    clinics = ClinicSerializer(read_only=True, many=True)\r\n    centers = CenterSerializer(read_only=True, many=True)\r\n    users = UserGetSerializer(read_only=True, many=True)\r\n\r\n    class Meta:\r\n        fields = '__all__'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/serializers.py b/api/serializers.py
--- a/api/serializers.py	(revision 97b662d644bb8a7e35e9c2a7bdab81fffec33098)
+++ b/api/serializers.py	(date 1689333901399)
@@ -12,19 +12,22 @@
 #         model = Disease
 #         fields = '__all__'
 
-class UserSerializer(serializers.Serializer):
-    number = serializers.CharField()
+class UserSerializer(serializers.ModelSerializer):
+    # number = serializers.CharField()
     password1 = serializers.CharField(write_only=True)
     password2 = serializers.CharField(write_only=True)
-    center_id = serializers.IntegerField(allow_null=True, required=False)
-    disease_id = serializers.PrimaryKeyRelatedField(
-        queryset=Disease.objects.all(),
-        allow_null=True,
-        required=False,
-        many=True
-    )
-    stage = serializers.IntegerField(read_only=True)
+    # center_id = serializers.IntegerField(allow_null=True, required=False)
+    # disease_id = serializers.PrimaryKeyRelatedField(
+    #     queryset=Disease.objects.all(),
+    #     allow_null=True,
+    #     required=False,
+    #     many=True
+    # )
+    # stage = serializers.IntegerField(read_only=True)
     group = serializers.CharField()
+    class Meta:
+        model = User
+        fields = '__all__'
 
 
 
Index: api/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.utils.html import format_html\r\n\r\nfrom .models import *\r\n\r\n\r\n# Register your models here.\r\n\r\nclass UserAdmin(admin.ModelAdmin):\r\n    list_display = ['id', 'number', 'email', 'first_name', 'last_name', 'birthday', 'group', 'center',\r\n                    'country', 'city', 'is_staff',\r\n                    'is_required', 'created_at', 'updated_at', 'verification_code', 'reset_code']\r\n    search_fields = ['login', 'number', 'email', 'first_name', 'last_name', ]\r\n    list_editable = ['is_required']\r\n    list_filter = ['group', 'country', 'disease', 'center', 'is_staff', 'is_required', ]\r\n    fields = ['id', 'number', 'email', 'first_name', 'last_name', 'birthday', 'group', 'center', 'disease', 'country',\r\n              'city', 'is_staff',\r\n              'is_required', 'created_at', 'updated_at','verification_code','reset_code' ]\r\n\r\n    readonly_fields = ['id', 'number',  'first_name', 'last_name', 'birthday', 'group', 'center', 'is_staff',]\r\n\r\n\r\n\r\nclass GroupsAdmin(admin.ModelAdmin):\r\n    list_display = ['id', 'name', 'number_of_people']\r\n\r\n\r\nclass CountriesAdmin(admin.ModelAdmin):\r\n    list_display = ['id', 'name',]\r\n    search_fields = ['name']\r\n    fields = ['name']\r\n    readonly_fields = ['id']\r\n\r\n\r\nclass CentersAdmin(admin.ModelAdmin):\r\n    list_display = ['id', 'name', 'is_required', 'employees_number', 'country', 'address',\r\n                   'created_at', 'updated_at', ]\r\n    search_fields = ['name', 'address']\r\n    list_editable = ['is_required']\r\n    list_filter = ['is_required', 'country', 'created_at', 'updated_at']\r\n    fields = ['name', 'is_required', 'employees_number', 'country', 'address',\r\n         ]\r\n    readonly_fields = ['id', 'created_at', 'updated_at']\r\n\r\n\r\nclass UrlParamsAdmin(admin.ModelAdmin):\r\n    list_display = ['id','get_parameter','group']\r\n    list_filter = ['group']\r\n    fields = ['group']\r\n\r\n    @admin.display\r\n    def get_parameter(self, obj):\r\n        return format_html(f'<a href=\"/registration/{obj}\">registration/{obj}</a>')\r\n\r\n    get_parameter.short_description = 'Ссылка'\r\n\r\nadmin.site.register(Centers, CentersAdmin)\r\nadmin.site.register(User, UserAdmin)\r\nadmin.site.register(Groups, GroupsAdmin)\r\nadmin.site.register(Interviews)\r\nadmin.site.register(Countries, CountriesAdmin)\r\nadmin.site.register(News)\r\nadmin.site.register(Like)\r\nadmin.site.register(Disease)\r\nadmin.site.register(Saved)\r\nadmin.site.register(Url_Params, UrlParamsAdmin)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/admin.py b/api/admin.py
--- a/api/admin.py	(revision 97b662d644bb8a7e35e9c2a7bdab81fffec33098)
+++ b/api/admin.py	(date 1689331620863)
@@ -9,15 +9,15 @@
 class UserAdmin(admin.ModelAdmin):
     list_display = ['id', 'number', 'email', 'first_name', 'last_name', 'birthday', 'group', 'center',
                     'country', 'city', 'is_staff',
-                    'is_required', 'created_at', 'updated_at', 'verification_code', 'reset_code']
+                    'is_required', 'created_at', 'updated_at', 'verification_code',]
     search_fields = ['login', 'number', 'email', 'first_name', 'last_name', ]
-    list_editable = ['is_required']
+    list_editable = ['is_required', ]
     list_filter = ['group', 'country', 'disease', 'center', 'is_staff', 'is_required', ]
     fields = ['id', 'number', 'email', 'first_name', 'last_name', 'birthday', 'group', 'center', 'disease', 'country',
               'city', 'is_staff',
-              'is_required', 'created_at', 'updated_at','verification_code','reset_code' ]
-
-    readonly_fields = ['id', 'number',  'first_name', 'last_name', 'birthday', 'group', 'center', 'is_staff',]
+              'is_required', 'created_at', 'updated_at','verification_code', 'reset_code' ]
+    readonly_fields = ['id', 'number',  'first_name', 'last_name', 'birthday', 'group', 'center', 'is_staff',
+                       'created_at', 'updated_at', 'country', 'city']
 
 
 
Index: .idea/Fsd_medic.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$\" />\r\n        <option name=\"settingsModule\" value=\"fsd_medic/settings.py\" />\r\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"migrations\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 virtualenv at D:\\Programming\\Python\\Django\\djangovenv\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Fsd_medic.iml b/.idea/Fsd_medic.iml
--- a/.idea/Fsd_medic.iml	(revision 97b662d644bb8a7e35e9c2a7bdab81fffec33098)
+++ b/.idea/Fsd_medic.iml	(date 1689331304925)
@@ -1,32 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="django" name="Django">
-      <configuration>
-        <option name="rootFolder" value="$MODULE_DIR$" />
-        <option name="settingsModule" value="fsd_medic/settings.py" />
-        <option name="manageScript" value="$MODULE_DIR$/manage.py" />
-        <option name="environment" value="&lt;map/&gt;" />
-        <option name="doNotUseTestRunner" value="false" />
-        <option name="trackFilePattern" value="migrations" />
-      </configuration>
-    </facet>
-  </component>
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.10 virtualenv at D:\Programming\Python\Django\djangovenv" jdkType="Python SDK" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.11 (fsd_medic) (4)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
     <option name="format" value="PLAIN" />
     <option name="myDocStringFormat" value="Plain" />
   </component>
-  <component name="TemplatesService">
-    <option name="TEMPLATE_CONFIGURATION" value="Django" />
-    <option name="TEMPLATE_FOLDERS">
-      <list>
-        <option value="$MODULE_DIR$/templates" />
-      </list>
-    </option>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="py.test" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/fsd_medic.iml\" filepath=\"$PROJECT_DIR$/.idea/fsd_medic.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 97b662d644bb8a7e35e9c2a7bdab81fffec33098)
+++ b/.idea/modules.xml	(date 1689331304941)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/fsd_medic.iml" filepath="$PROJECT_DIR$/.idea/fsd_medic.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/Fsd_medic.iml" filepath="$PROJECT_DIR$/.idea/Fsd_medic.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
